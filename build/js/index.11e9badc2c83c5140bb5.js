(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{39:function(e,n,t){var r=t(17),a=t(40);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},40:function(e,n,t){"use strict";t.r(n);var r=t(10),a=t.n(r)()(!0);a.push([e.i,"body {\n    margin: 0;\n    padding: 0;\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n}\n\n.App__header {\n    height: 60px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: cornflowerblue;\n}\n\n.App__header-link {\n    margin: 20px;\n}\n.App__header-link:visited {\n    color: black;\n}\n","",{version:3,sources:["webpack://src/App.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,0BAA0B;AAC9B;;AAEA;IACI,YAAY;AAChB;AACA;IACI,YAAY;AAChB",sourcesContent:["body {\n    margin: 0;\n    padding: 0;\n}\n\ntextarea:focus, input:focus{\n    outline: none;\n}\n\n.App__header {\n    height: 60px;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: cornflowerblue;\n}\n\n.App__header-link {\n    margin: 20px;\n}\n.App__header-link:visited {\n    color: black;\n}\n"],sourceRoot:""}]),n.default=a},41:function(e,n,t){var r=t(17),a=t(42);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},42:function(e,n,t){"use strict";t.r(n);var r=t(10),a=t.n(r)()(!0);a.push([e.i,".Search {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px 0;\n}\n\n.Search__inputRow {\n    display: flex;\n    margin-bottom: 20px;\n}\n\n.Search__input {\n    width: 500px;\n    height: 40px;\n    font-size: 14pt;\n}\n\n.Search__searchButton {\n    border: 1px solid black;\n    width: 80px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.Search__results {\n    display: flex;\n    flex-direction: column;\n    width: 500px;\n}\n\n.Search__resultRow {\n    margin-bottom: 10px;\n    padding-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    border-bottom: 1px solid black;\n}\n\n.Search__addToFavourites {\n    text-decoration: underline;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    width: 200px;\n}\n\n.Search__pages {\n    display: flex;\n    justify-content: space-evenly;\n    width: 100%;\n}\n\n.Search__page-link {\n    cursor: pointer;\n    text-decoration: underline;\n}","",{version:3,sources:["webpack://src/pages/Search/Search.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,uBAAuB;IACvB,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,oBAAoB;IACpB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;AAEA;IACI,0BAA0B;IAC1B,mBAAmB;IACnB,uBAAuB;IACvB,eAAe;IACf,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,WAAW;AACf;;AAEA;IACI,eAAe;IACf,0BAA0B;AAC9B",sourcesContent:[".Search {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px 0;\n}\n\n.Search__inputRow {\n    display: flex;\n    margin-bottom: 20px;\n}\n\n.Search__input {\n    width: 500px;\n    height: 40px;\n    font-size: 14pt;\n}\n\n.Search__searchButton {\n    border: 1px solid black;\n    width: 80px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.Search__results {\n    display: flex;\n    flex-direction: column;\n    width: 500px;\n}\n\n.Search__resultRow {\n    margin-bottom: 10px;\n    padding-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    border-bottom: 1px solid black;\n}\n\n.Search__addToFavourites {\n    text-decoration: underline;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    width: 200px;\n}\n\n.Search__pages {\n    display: flex;\n    justify-content: space-evenly;\n    width: 100%;\n}\n\n.Search__page-link {\n    cursor: pointer;\n    text-decoration: underline;\n}"],sourceRoot:""}]),n.default=a},64:function(e,n,t){var r=t(17),a=t(65);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1};r(a,o);e.exports=a.locals||{}},65:function(e,n,t){"use strict";t.r(n);var r=t(10),a=t.n(r)()(!0);a.push([e.i,".Favourites {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 30px;\n}\n\n.Favourites__list {\n    display: flex;\n    flex-direction: column;\n    width: 500px;\n}\n\n.Favourites__row {\n    margin-bottom: 10px;\n    padding-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    border-bottom: 1px solid black;\n}\n\n.Favourites__remove {\n    width: 150px;\n    cursor: pointer;\n    text-decoration: underline;\n}","",{version:3,sources:["webpack://src/pages/Favourites/Favourites.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,YAAY;AAChB;;AAEA;IACI,mBAAmB;IACnB,oBAAoB;IACpB,aAAa;IACb,sBAAsB;IACtB,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,eAAe;IACf,0BAA0B;AAC9B",sourcesContent:[".Favourites {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding-top: 30px;\n}\n\n.Favourites__list {\n    display: flex;\n    flex-direction: column;\n    width: 500px;\n}\n\n.Favourites__row {\n    margin-bottom: 10px;\n    padding-bottom: 10px;\n    display: flex;\n    flex-direction: column;\n    border-bottom: 1px solid black;\n}\n\n.Favourites__remove {\n    width: 150px;\n    cursor: pointer;\n    text-decoration: underline;\n}"],sourceRoot:""}]),n.default=a},67:function(e,n,t){"use strict";t.r(n);var r=t(0),a=t.n(r),o=t(14),i=t.n(o),c=(t(39),t(13)),s=t(2),l=(t(41),t(11)),u=t(32),A=t.n(u);function p(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var t=[],r=!0,a=!1,o=void 0;try{for(var i,c=e[Symbol.iterator]();!(r=(i=c.next()).done)&&(t.push(i.value),!n||t.length!==n);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==c.return||c.return()}finally{if(a)throw o}}return t}(e,n)||function(e,n){if(!e)return;if("string"==typeof e)return d(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return d(e,n)}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function d(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var f=Object(l.b)((function(e){return{searchResult:e.search.searchResult,isFetching:e.search.isFetching,page:e.search.page,errorMessage:e.search.errorMessage}}),(function(e){return{search:function(n,t){return e(function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return function(t){t({type:"SEARCH_REQUEST",payload:{query:e,page:n}}),A()({method:"GET",url:"https://musicbrainz.org/ws/2/recording/",params:{fmt:"json",query:e,offset:25*n}}).then((function(e){t({type:"SEARCH_SUCCESS",payload:e})})).catch((function(e){t({type:"SEARCH_FAILURE",payload:e}),console.log(e)}))}}(n,t))},addToFavourites:function(n){return e(function(e){return{type:"ADD_TO_FAVOURITES",payload:e}}(n))}}}))((function(e){var n=p(Object(r.useState)(""),2),t=n[0],o=n[1],i=e.searchResult.map((function(n){return a.a.createElement("div",{className:"Search__resultRow",key:n.id},a.a.createElement("div",null,n["artist-credit"][0].name," -",n.title),a.a.createElement("div",{className:"Search__addToFavourites",onClick:function(){e.addToFavourites(n)}},"Add to favourites"))}));return a.a.createElement("div",{className:"Search"},a.a.createElement("div",{className:"Search__inputRow"},a.a.createElement("input",{className:"Search__input",value:t,onChange:function(e){o(e.target.value)},onKeyPress:function(n){"Enter"===n.key&&e.search(t)},placeholder:"Input album name"}),a.a.createElement("div",{className:"Search__searchButton",onClick:function(){e.search(t)}},"Search")),e.isFetching&&"loading",!!i.length&&a.a.createElement("div",null,a.a.createElement("div",{className:"Search__results"},i),a.a.createElement("div",{className:"Search__pages"},a.a.createElement("div",{className:"Search__page-link",onClick:function(){e.search(t,e.page-1)}},"prev page"),a.a.createElement("div",null,e.page+1),a.a.createElement("div",{className:"Search__page-link",onClick:function(){e.search(t,e.page+1)}},"next page"))),e.errorMessage&&a.a.createElement("div",null,e.errorMessage))}));t(64);var m=Object(l.b)((function(e){return{favourites:e.favourites.favourites}}),(function(e){return{removeFromFavourites:function(n){return e(function(e){return{type:"REMOVE_FROM_FAVOURITES",payload:e}}(n))},readFavourites:function(){return e({type:"READ_FAVOURITES"})}}}))((function(e){Object(r.useState)((function(){e.readFavourites()}),[]);var n=e.favourites.map((function(n){return a.a.createElement("div",{className:"Favourites__row",key:n.id},a.a.createElement("div",null,n["artist-credit"][0].name," -",n.title),a.a.createElement("div",{className:"Favourites__remove",onClick:function(){e.removeFromFavourites(n)}},"remove"))}));return a.a.createElement("div",{className:"Favourites"},a.a.createElement("div",{className:"Favourites__list"},n))}));var h=function(){return a.a.createElement(c.a,null,a.a.createElement("div",{className:"App"},a.a.createElement("div",{className:"App__header"},a.a.createElement("div",{className:"App__links"},a.a.createElement(c.b,{className:"App__header-link",to:"/search"},"Search"),a.a.createElement(c.b,{className:"App__header-link",to:"/favourites"},"Favourites"))),a.a.createElement(s.d,null,a.a.createElement(s.b,{path:"/search"},a.a.createElement(f,null)),a.a.createElement(s.b,{path:"/favourites",exact:!0},a.a.createElement(m,null)),a.a.createElement(s.b,{path:"/"},a.a.createElement(s.a,{to:"/search"}),";"))))},v=t(8);function g(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function y(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?g(Object(t),!0).forEach((function(n){b(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):g(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var _={searchQuery:"",searchResult:[],isFetching:!1,page:0,errorMessage:null};function C(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function I(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?C(Object(t),!0).forEach((function(n){B(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):C(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function B(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function x(e){return function(e){if(Array.isArray(e))return E(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,n){if(!e)return;if("string"==typeof e)return E(e,n);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return E(e,n)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function E(e,n){(null==n||n>e.length)&&(n=e.length);for(var t=0,r=new Array(n);t<n;t++)r[t]=e[t];return r}var S={favourites:[]};var O=Object(v.c)({search:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:_,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case"SEARCH_REQUEST":return y(y({},e),{},{isFetching:!0,searchQuery:n.payload.query,page:n.payload.page>0?n.payload.page:0,errorMessage:null});case"SEARCH_SUCCESS":var t=n.payload.data;return y(y({},e),{},{searchResult:t.recordings,isFetching:!1,errorMessage:null});case"SEARCH_FAILURE":var r="Something went wrong, please try again";return 400===n.payload.response.status&&(r="No results found for this query"),y(y({},e),{},{isFetching:!1,searchResult:[],errorMessage:r});default:return e}},favourites:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:S,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case"ADD_TO_FAVOURITES":if(!e.favourites.some((function(e){return e.id===n.payload.id}))){var t=[].concat(x(e.favourites),[n.payload]);return localStorage.setItem("favouriteAlbums",JSON.stringify(t)),I(I({},e),{},{favourites:t})}return I({},e);case"REMOVE_FROM_FAVOURITES":var r=e.favourites.filter((function(e){return e.id!==n.payload.id}));return localStorage.setItem("favouriteAlbums",JSON.stringify(r)),I(I({},e),{},{favourites:r});case"READ_FAVOURITES":var a=JSON.parse(localStorage.getItem("favouriteAlbums"));return I(I({},e),{},{favourites:a});default:return e}}}),w=t(33),j=t.n(w),F=t(34),R=Object(v.d)(O,Object(v.a)(F.a,j.a));i.a.render(a.a.createElement(l.a,{store:R},a.a.createElement(h,null)),document.getElementById("root"))}},[[67,1,2]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,